{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Visualization Tools for live data over WebSockets using d3.js","google":"","name":"live_stats.js","body":"# live_stats.js\r\n\r\nlive_stats.js is a simple graphing and charting library designed to stream content from a WebSocket connection and display a live updating chart of the data using d3.js and SVG in a browser.\r\n\r\nIt is currently a work in progress.\r\n\r\n![live_stats.js Screenshot](https://github.com/frasergraham/live_stats.js/raw/master/doc/screenshot.png)\r\n\r\n## Using live_stats.js\r\n\r\n### Server\r\nTo serve up data to live_stats.js you need any WebSocket server tech and simply send a regular stream of data as JSON in the following format...\r\n\r\n```JSON\r\n{\r\n    \"group_1\" : [{\"name\" : \"Sample A\", \"value\": 10},\r\n                 {\"name\" : \"Sample B\", \"value\": 20},\r\n                 {\"name\" : \"Sample C\", \"value\": 35}],\r\n    \r\n    \"group_2\" : [{\"name\" : \"Apples\", \"value\": 100},\r\n                 {\"name\" : \"Bananas\", \"value\": 2321}],\r\n    \r\n    \"group_3\" : [{\"name\" : \"Beer\", \"value\": 10},\r\n                 {\"name\" : \"Wine\", \"value\": 200},\r\n                 {\"name\" : \"Whisky\", \"value\": 100}],\r\n}\r\n```\r\n\r\nEach \"group\" of data can be used to generate it's own chart and a group can have as many named numerical entries as you need.\r\n\r\n### Client\r\n\r\nAfter you include live_stats.js in your application generating charts is a two step process, connect to the data source and then decide what type of chart you want for each of the groups being sent to you.\r\n\r\n```Javascript\r\n\r\n// Establish a connection to a WebSocket Server\r\nvar connection = live_charts.connect_to_data_source(\"ws://localhost:8080\",\r\n    // This function gets called once a stream of data starts \r\n    //  with the names of the groups of data passed in.\r\n    function(data_groups){\r\n\r\n        // The data_source atribute determines which group from the data stream\r\n        // is used, if the values in that group change the chart updates\r\n        // The bind() function actually creates the chart in the selector specified\r\n        test_line = connection.line_chart()\r\n                              .width(400)\r\n                              .height(500)\r\n                              .data_source(data_groups[0])\r\n                              .bind(\"#test_1\");\r\n\r\n        test_bar = connection.bar_chart()\r\n                             .width(200)\r\n                             .height(300)\r\n                             .data_source(data_groups[1])\r\n                             .bind(\"#test_2\");\r\n\r\n       test_pie = connection.pie_chart()\r\n                             .width(300)\r\n                             .height(300)\r\n                             .data_source(data_groups[2])\r\n                             .bind(\"#test_2\");\r\n    });\r\n```\r\n\r\nCurrently three types of charts are supported\r\n\r\n* Pie Charts\r\n* Horizontal Bar Charts\r\n* Stacked Line Charts\r\n"}